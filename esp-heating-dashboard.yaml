substitutions:
  devicename: esp-heating-dashboard
  friendly_name: ESP32 Heating Dashboard

esphome:
  name: $devicename

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:
  level: DEBUG

api:
  password: !secret api_password
  # encryption:
  #   key: !secret esp_heating_dashboard_key

ota:
  password: !secret ota_password

wifi:
  power_save_mode: NONE
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Heating-Dashboard"
    password: !secret wifi_fallback_password

captive_portal:

web_server:
  port: 80    
  ota: false

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false
  id: bus_i2c

binary_sensor:
  - platform: status
    name: ${friendly_name} Status

  - platform: touchscreen
    name: ${friendly_name} Top Left Touch Button
    x_min: 0
    x_max: 100
    y_min: 0
    y_max: 100
    
button:
  - platform: restart
    name: ${friendly_name} Restart
    
  - platform: safe_mode
    name: ${friendly_name} Safe Mode
    
  - platform: shutdown
    name: ${friendly_name} Shutdown

text_sensor:
  - platform: version
    name: ${friendly_name} ESPHome Version

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: ${friendly_name} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: ${friendly_name} WiFi Signal Percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: sht3xd
    temperature:
      id: sht3xd_1_temperature
      internal: true
      accuracy_decimals: 1
    humidity:
      id: sht3xd_1_humidity
      internal: true
      accuracy_decimals: 1
    address: 0x44
    update_interval: 60s

  - platform: sht3xd
    temperature:
      id: sht3xd_2_temperature
      internal: true
      accuracy_decimals: 1
    humidity:
      id: sht3xd_2_humidity
      internal: true
      accuracy_decimals: 1
    address: 0x45
    update_interval: 60s

  - platform: template
    name: ${friendly_name} Local Temperature
    lambda: |-
      return (id(sht3xd_1_temperature).state + id(sht3xd_2_temperature).state) / 2.0;
    update_interval: 60s

  - platform: template
    name: ${friendly_name} Local Humidity
    lambda: |-
      return (id(sht3xd_1_humidity).state + id(sht3xd_2_humidity).state) / 2.0;
    update_interval: 60s

output:
  - platform: ledc
    pin: GPIO4
    id: gpio_4_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_4_backlight_pwm
    name: ${friendly_name} Display Backlight
    id: back_light
    restore_mode: ALWAYS_ON

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 20

color:
  - id: my_red
    red: 100%
    green: 20%
    blue: 25%
    white: 0%

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: GPIO5
    dc_pin: GPIO16
    # led_pin: GPIO4  
    reset_pin: GPIO17
    rotation: 270

    lambda: |-
      it.fill(COLOR_BLACK);
      it.strftime(0, 0, id(roboto), id(my_red), "%Y-%m-%d %H:%M", id(homeassistant_time).now());

touchscreen:
  platform: xpt2046
  id: my_touchscreen
  cs_pin: GPIO15
  interrupt_pin: GPIO2
  update_interval: 50ms
  report_interval: 1s
  threshold: 400
  calibration_x_min: 3820
  calibration_x_max: 220
  calibration_y_min: 3895
  calibration_y_max: 358
  swap_x_y: false
  # on_touch:
  #   - lambda: |-
  #         ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
  #             id(my_touchscreen).x,
  #             id(my_touchscreen).y,
  #             id(my_touchscreen).x_raw,
  #             id(my_touchscreen).y_raw
  #             );

