substitutions:
  devicename: esp-heating-dashboard
  friendly_name: ESP32 Heating Dashboard

esphome:
  name: $devicename

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:
  level: DEBUG

api:
  password: !secret api_password
  # encryption:
  #   key: !secret esp_heating_dashboard_key

ota:
  password: !secret ota_password

wifi:
  power_save_mode: NONE
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Heating-Dashboard"
    password: !secret wifi_fallback_password

captive_portal:

web_server:
  port: 80    
  ota: false

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false
  id: bus_i2c

binary_sensor:
  - platform: status
    name: ${friendly_name} Status

  - platform: touchscreen
    internal: true
    id: more_options
    page_id: page1
    x_min: 290
    x_max: 320
    y_min: 0
    y_max: 30
    on_press:
      then:
        lambda: |-
          ESP_LOGD("more_options", "pressed");
  
  - platform: touchscreen
    internal: true
    id: target_temperature_plus
    page_id: page1
    x_min: 160
    x_max: 220
    y_min: 45
    y_max: 105
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("target_temperature_plus", "pressed");
            id(target_temperature).publish_state(id(target_temperature).state + 0.5);
        - component.update: my_display

  - platform: touchscreen
    internal: true
    id: target_temperature_minus
    page_id: page1
    x_min: 240
    x_max: 300
    y_min: 45
    y_max: 405
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("target_temperature_minus", "pressed");
            id(target_temperature).publish_state(id(target_temperature).state - 0.5);
        - component.update: my_display
    
button:
  - platform: restart
    name: ${friendly_name} Restart
    
  - platform: safe_mode
    name: ${friendly_name} Safe Mode
    
  - platform: shutdown
    name: ${friendly_name} Shutdown

text_sensor:
  - platform: version
    name: ${friendly_name} ESPHome Version

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: ${friendly_name} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: ${friendly_name} WiFi Signal Percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: sht3xd
    temperature:
      id: sht3xd_1_temperature
      internal: true
      accuracy_decimals: 1
    humidity:
      id: sht3xd_1_humidity
      internal: true
      accuracy_decimals: 2
    address: 0x44
    update_interval: 60s

  - platform: sht3xd
    temperature:
      id: sht3xd_2_temperature
      internal: true
      accuracy_decimals: 1
    humidity:
      id: sht3xd_2_humidity
      internal: true
      accuracy_decimals: 2
    address: 0x45
    update_interval: 60s

  - platform: template
    name: ${friendly_name} Local Temperature
    id: local_temperature
    unit_of_measurement: "째C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    lambda: |-
      return (id(sht3xd_1_temperature).state + id(sht3xd_2_temperature).state) / 2.0;
    update_interval: 60s

  - platform: template
    name: ${friendly_name} Local Humidity
    id: local_humidity
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 2
    lambda: |-
      return (id(sht3xd_1_humidity).state + id(sht3xd_2_humidity).state) / 2.0;
    update_interval: 60s
  
  - platform: homeassistant
    id: target_temperature
    name: ${friendly_name} Target Temperature
    internal: false
    entity_id: climate.better_aqara_e1
    attribute: temperature
    unit_of_measurement: "째C"
    device_class: "temperature"
    state_class: "measurement"

graph:
  - id: temperature_graph_1h
    duration: 1h
    width: 320
    height: 120
    y_grid: 1
    min_range: 1
    max_range: 10
    x_grid: 10min
    traces:
      - sensor: local_temperature
        line_type: SOLID
        line_thickness: 3
        color: my_red2
      - sensor: target_temperature
        line_type: SOLID
        line_thickness: 2
        color: my_blue

output:
  - platform: ledc
    pin: GPIO4
    id: gpio_4_backlight_pwm

light:
  - platform: monochromatic
    output: gpio_4_backlight_pwm
    name: ${friendly_name} Display Backlight
    id: back_light
    restore_mode: ALWAYS_ON

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto Mono"
    id: roboto_mono
    size: 20

  - file: "gfonts://Inconsolata"
    id: inconsolata_30
    size: 30
  - file: "gfonts://Inconsolata"
    id: inconsolata_15
    size: 15

image:
  - file: "icons/temperature.png"
    id: temperature_ico
    resize: 30x30
    type: RGB565
  - file: "icons/temperature-set.png"
    id: temperature_set_ico
    resize: 30x30
    type: RGB565
  - file: "icons/humidity.png"
    id: humidity_ico
    resize: 30x30
    type: RGB565
  - file: "icons/bar-chart.png"
    id: chart_ico
    resize: 30x30
    type: RGB565
  - file: "icons/plus.png"
    id: plus_ico
    resize: 60x60
    type: RGB565
  - file: "icons/minus.png"
    id: minus_ico
    resize: 60x60
    type: RGB565
  

color:
  - id: my_red
    red: 100%
    green: 20%
    blue: 25%
  - id: my_red2
    red: 91%
    green: 11%
    blue: 38%
  - id: my_blue
    red: 15%
    green: 60%
    blue: 83%
  - id: my_green
    red: 5%
    green: 48%
  - id: secondary
    red: 40%
    green: 40%
    blue: 40%

display:
  - platform: ili9341
    id: my_display
    model: TFT 2.4
    cs_pin: GPIO5
    dc_pin: GPIO16
    # led_pin: GPIO4  
    reset_pin: GPIO17
    rotation: 270
    pages:
      - id: page1
        lambda: |-
          it.fill(Color::BLACK);
          it.strftime(0, 0, id(inconsolata_30), id(secondary), "%Y-%m-%d %H:%M", id(homeassistant_time).now());
          it.image(290, 0, id(chart_ico));

          it.image(0, 30, id(temperature_ico));
          it.printf(35, 30, id(inconsolata_30), id(my_red2), "%4.2f째C", id(local_temperature).state);

          it.image(0, 60, id(temperature_set_ico));
          it.printf(35, 60, id(inconsolata_30), id(my_blue), "%4.2f째C", id(target_temperature).state);

          it.image(0, 90, id(humidity_ico));
          it.printf(35, 90, id(inconsolata_30), "%4.2f%%", id(local_humidity).state);

          it.image(160, 45, id(plus_ico));
          it.image(240, 45, id(minus_ico));

          it.graph(0, 120, id(temperature_graph_1h));
          it.printf(5, 223, id(inconsolata_15), id(secondary), "10min");

touchscreen:
  platform: xpt2046
  id: my_touchscreen
  cs_pin: GPIO15
  interrupt_pin: GPIO2
  update_interval: 50ms
  report_interval: 1s
  threshold: 400
  calibration_x_min: 3820
  calibration_x_max: 220
  calibration_y_min: 3895
  calibration_y_max: 358
  swap_x_y: false
  # on_touch:
  #   - lambda: |-
  #         ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
  #             id(my_touchscreen).x,
  #             id(my_touchscreen).y,
  #             id(my_touchscreen).x_raw,
  #             id(my_touchscreen).y_raw
  #             );

